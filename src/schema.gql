type AuthDto {
  id: Int!
  accessToken: String!
  fullname: String!
  email: String!
  roleName: Role!
  authorities: [String!]!
}

enum Role {
  ADMIN
  SUPER_ADMIN
  CARE
  CERMATI
}

type Transaction {
  hash: String!
  blockNumber: Int
  isSuccess: Boolean
}

type Airline {
  id: Float!
  iata: String!
  icao: String!
  name: String!
}

type Airport {
  id: Float!
  iata: String!
  icao: String!
  name: String!
  timezone: String!
}

type Flight {
  id: String!
  number: String!
  scheduledDepartureDate: DateTime!
  actualDepartureDate: DateTime
  scheduledArrivalTime: DateTime
  actualArrivalTime: DateTime
  createdAt: DateTime!
  isLate: Boolean
  nFailedAttempt: Float!
  claims: [Claim!]!
  airline: Airline!
  departureAirport: Airport!
  arrivalAirport: Airport!
  policies: [Policy!]!
  lastRefetchDate: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Claim {
  id: Float!
  claimNo: String
  status: Float
  hasNotifiedUpdateBankInfo: Boolean!
  delayedHours: Float
  amount: Float
  password: String!
  nextCallback: DateTime
  lossTime: DateTime
  createdAt: DateTime!
  claimExpiredDate: DateTime
  policy: Policy!
  flight: Flight!
}

type ProductSchema {
  id: String!
  createTransaction: Transaction!
  policy: Policy!
}

type Policy {
  id: String!
  policyNo: String!
  cermatiOrderId: String
  TIKETOrderID: String
  hash: String!
  createdAt: DateTime!
  customer: Customer!
  flights: [Flight!]!
  claims: [Claim!]!
  product: ProductSchema!
  createTransaction: Transaction
  updateTransaction: Transaction
}

type Customer {
  id: Int!
  userHash: String
  insuredName: String
  phoneNumber: String
  insuredEmail: String
  category: String
  gender: String
  bankNumber: String
  accountName: String
  bank: Bank
  policy: PolicyPublic!
}

type Bank {
  id: Int!
  bankCode: String!
  bankName: String!
}

type FlightPublic {
  id: String!
  number: Float!
  scheduledDepartureDate: DateTime!
  actualDepartureDate: DateTime
  scheduledArrivalTime: DateTime!
  actualArrivalTime: DateTime
  createdAt: DateTime!
  isLate: Boolean
  airline: Airline!
  departureAirport: Airport!
  arrivalAirport: Airport!
}

type CustomerPublic {
  id: Int!
  userHash: String
  insuredName: String
  phoneNumber: String
  insuredEmail: String
  category: String
  gender: String
  bankNumber: String
  accountName: String
  bankName: String
  bankCode: String
  bankId: Int
}

type PolicyPublic {
  id: String!
  policyNo: String!
  cermatiOrderId: String
  TIKETOrderID: String
  hash: String!
  createdAt: DateTime!
  customer: CustomerPublic!
}

type ClaimPublic {
  id: Float!
  claimNo: String
  requestId: String
  status: Float
  delayedHours: Float
  amount: Float
  password: String!
  nextCallback: DateTime
  createdAt: DateTime!
  claimExpiredDate: DateTime
  flight: FlightPublic!
}

type ClaimPublicPolicy {
  id: Float!
  claimNo: String
  requestId: String
  status: Float
  delayedHours: Float
  amount: Float
  password: String!
  nextCallback: DateTime
  createdAt: DateTime!
  claimExpiredDate: DateTime
  flight: FlightPublic!
  policy: PolicyPublic!
}

type Meta {
  totalItems: Float!
  itemCount: Float!
  itemsPerPage: Float!
  totalPages: Float!
  currentPage: Float!
}

type ClaimPagination {
  claims: [Claim!]!
  meta: Meta!
}

type ClaimAmountSum {
  date: DateTime!
  sum: Int!
}

type ClaimCount {
  date: DateTime!
  count: Int!
}

type ClaimFlightStat {
  carrier: String!
  lateCount: Int!
  claimCount: Int!
  claimAmountSum: Int!
}

type FlightCount {
  date: DateTime!
  onTime: Int!
  delayed: Int!
}

type FlightPagination {
  flights: [Flight!]!
  meta: Meta!
}

type PolicyPublicClaim {
  id: String!
  policyNo: String!
  cermatiOrderId: String
  TIKETOrderID: String
  hash: String!
  createdAt: DateTime!
  customer: CustomerPublic!
  claims: [ClaimPublic!]!
  claim: ClaimPublic!
}

type FlightDetailOutput {
  flightNumber: String!
  departureAirport: String!
  arrivalAirport: String!
  departureDate: String!
}

type CarePolicyOutput {
  policyNo: String!
  productID: String!
  productName: String!
  insuredName: String!
  insuredEmail: String!
  category: String!
  birthDate: String!
  phoneNumber: String!
  gender: String!
  nationality: String!
  identityNumber: String!
  TIKETOrderID: String!
  cermatiOrderID: String!
  flightDetails: [FlightDetailOutput!]!
  premiumFee: Float!
  premiumAdminFee: Float!
  Code: String!
}

type CreateOrUpdateCarePolicies {
  success: [CarePolicyOutput!]!
  alreadyExists: [CarePolicyOutput!]!
  failed: [CarePolicyOutput!]!
}

type PolicyCount {
  date: DateTime!
  count: Float!
}

type PolicyPagination {
  policies: [Policy!]!
  meta: Meta!
}

type RoleDto {
  name: String!
}

type UserDto {
  id: Int!
  fullname: String!
  email: String!
  roleName: Role!
  active: Boolean!
}

type UserPagination {
  users: [UserDto!]!
  meta: Meta!
}

type Query {
  policyById(id: String!): Policy!
  policies(
    limit: Int
    page: Int
    endDate: DateTime
    startDate: DateTime
    search: String
  ): PolicyPagination!
  policyCountDaily(endDate: DateTime!, startDate: DateTime!): [PolicyCount!]!
  policyCountMonthly(
    endMonth: DateTime!
    startMonth: DateTime!
  ): [PolicyCount!]!
  searchPolicy(name: String!, policyNo: String!): [PolicyPublicClaim!]!
  currentUser: AuthDto!
  bank(id: Int!): Bank!
  banks: [Bank!]!
  customer(id: Int!): Customer!
  userLists(limit: Int, page: Int, search: String): UserPagination!
  roles: [RoleDto!]!
  claims(
    limit: Int
    page: Int
    status: Int
    endDate: DateTime
    startDate: DateTime
    search: String
  ): ClaimPagination!
  claimById(id: Float!): Claim!
  claimCountDaily(endDate: DateTime!, startDate: DateTime!): [ClaimCount!]!
  claimCountMonthly(endMonth: DateTime!, startMonth: DateTime!): [ClaimCount!]!
  claimAmountSumDaily(
    endDate: DateTime!
    startDate: DateTime!
  ): [ClaimAmountSum!]!
  claimAmountSumMonthly(
    endMonth: DateTime!
    startMonth: DateTime!
  ): [ClaimAmountSum!]!
  claimFlightStat(endDate: DateTime!, startDate: DateTime!): [ClaimFlightStat!]!
  claim(password: String!, policyNo: String!): ClaimPublicPolicy!
  flight(id: String!): Flight!
  flightsByStatusFilter(
    limit: Int
    page: Int
    endDate: DateTime
    startDate: DateTime
    search: String
    status: Float
  ): FlightPagination!
  flightCountDaily(endDate: DateTime!, startDate: DateTime!): [FlightCount!]!
  flightCountMonthly(
    endMonth: DateTime!
    startMonth: DateTime!
  ): [FlightCount!]!
  flights(
    paginate: FlightsPaginationInput
    filter: FlightsFilterInput
    search: String
  ): FlightPagination!
}

input FlightsPaginationInput {
  limit: Float
  page: Float
}

input FlightsFilterInput {
  incomplete: Boolean
  modified: Boolean
}

type Mutation {
  createPolicy(carePolicyInput: CarePolicyResolverData!): PolicyPublic!
  createOrUpdateCarePolicies(
    input: [CarePolicyResolverData!]!
  ): CreateOrUpdateCarePolicies!
  updateFlightPoliciesTiket(
    flightDetails: [FlightDetailInput!]!
    cermatiOrderId: String!
    policyNo: String!
  ): PolicyPublic!
  login(password: String!, email: String!): AuthDto!
  createBank(bankCode: String!, bankName: String!): Bank!
  setBankData(
    policyPassword: String!
    policyNo: String!
    accountName: String!
    bankNumber: String!
    bankCode: String!
  ): CustomerPublic!
  createUser(
    status: Boolean!
    role: Role!
    password: String!
    email: String!
    fullname: String!
  ): UserDto!
  updatePassword(password: String!, id: Int!): UserDto!
  updateUser(input: UpdateUserDto!, id: Int!): UserDto!
  setUserActive(id: Int!): UserDto!
  setUserInactive(id: Int!): UserDto!
  createFlight(input: CreateFlightInput!): Flight!
  updateFlight(input: CreateFlightInput!, id: String!): Flight!
  updateFlightStatus(input: UpdateFlightInput!): Flight!
}

input CarePolicyResolverData {
  policyNo: String!
  productID: String!
  productName: String!
  insuredName: String!
  insuredEmail: String!
  category: String!
  birthDate: String!
  phoneNumber: String!
  gender: String!
  nationality: String!
  identityNumber: String!
  TIKETOrderID: String!
  cermatiOrderID: String!
  flightDetails: [FlightDetailInput!]!
  premiumFee: Float!
  premiumAdminFee: Float!
  Code: String!
}

input FlightDetailInput {
  flightNumber: String!
  departureAirport: String!
  arrivalAirport: String!
  departureDate: String!
}

input UpdateUserDto {
  fullname: String
  email: String
  role: Role
  password: String
  status: Boolean
}

input CreateFlightInput {
  number: String!
  scheduledDepartureDate: DateTime!
  actualDepartureDate: DateTime
  scheduledArrivalTime: DateTime!
  actualArrivalTime: DateTime
  status: Float
  airlineId: Float
  airline: CreateAirlineInput
  departureAirportId: Float
  departureAirport: CreateAirportInput
  arrivalAirportId: Float
  arrivalAirport: CreateAirportInput
}

input CreateAirlineInput {
  iata: String!
  icao: String!
  name: String!
}

input CreateAirportInput {
  iata: String!
  icao: String!
  name: String!
  timezone: String!
}

input UpdateFlightInput {
  requestId: String!
  id: String!
  status: Float!
  actualDepartureTime: DateTime!
}
